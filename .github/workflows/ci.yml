name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.22.0'
      - name: Generate templates (templ)
        run: go run github.com/a-h/templ/cmd/templ@latest generate -include-version=false -include-timestamp=false
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download deps
        run: go run ./cmd/gforge mod download
      - name: Vet
        run: go run ./cmd/gforge vet
      - name: Test
        run: go run ./cmd/gforge test
      - name: CLI Test (gforge)
        run: go run ./cmd/gforge test --with-build --cover
        env:
          LOG_FORMAT: off
          GFORGE_SKIP_TOOLS: "1"
      - name: Govulncheck
        run: go run ./cmd/gforge vuln

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.22.0'
      - name: Generate templates (templ)
        run: go run github.com/a-h/templ/cmd/templ@latest generate -include-version=false -include-timestamp=false
      - name: golangci-lint (gforge)
        run: go run ./cmd/gforge lint --args "--timeout=5m"

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.22.0'
      - name: Download deps
        run: go mod download
      - name: Compute deploy flags
        id: flags
        shell: bash
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cf_ok=false
          if [ -n "${CF_API_TOKEN}" ] && [ -n "${CF_ACCOUNT_ID}" ] && [ -n "${CF_PROJECT_NAME}" ]; then cf_ok=true; fi
          rw_ok=false
          if [ -n "${RAILWAY_TOKEN}" ]; then rw_ok=true; fi
          db_ok=false
          if [ -n "${DATABASE_URL}" ]; then db_ok=true; fi
          echo "cf_ok=$cf_ok" >> $GITHUB_OUTPUT
          echo "rw_ok=$rw_ok" >> $GITHUB_OUTPUT
          echo "db_ok=$db_ok" >> $GITHUB_OUTPUT
      - name: Export static site (SSG)
        run: go run ./cmd/gforge export -o dist
        env:
          GFORGE_SKIP_TOOLS: "1"
          LOG_FORMAT: off
      - name: Run DB migrations (Neon)
        if: ${{ steps.flags.outputs.db_ok == 'true' }}
        run: go run ./cmd/gforge db --migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Deploy to Cloudflare Pages
        if: ${{ steps.flags.outputs.cf_ok == 'true' }}
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Railway CLI
        if: ${{ steps.flags.outputs.rw_ok == 'true' }}
        run: |
          npm i -g @railway/cli
      - name: Railway deploy (up)
        if: ${{ steps.flags.outputs.rw_ok == 'true' }}
        run: railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
