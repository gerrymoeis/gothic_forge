package templates
import (
    "strings"
    "gothicforge/internal/framework/env"
)

// LayoutSEO is like Layout but accepts a full SEO struct for per-page meta.
templ LayoutSEO(meta SEO) {
    <!DOCTYPE html>
    <html lang="en" data-theme="dark">
        <head>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>{ meta.Title }</title>
            if meta.Description != "" {
                <meta name="description" content={ meta.Description }/>
            }
            if len(meta.Keywords) > 0 {
                <meta name="keywords" content={ strings.Join(meta.Keywords, ", ") }/>
            }
            <meta property="og:title" content={ meta.Title }/>
            if meta.Description != "" {
                <meta property="og:description" content={ meta.Description }/>
            }
            <meta property="og:type" content="website"/>
            {
                // Resolve canonical URL. If relative, prefix BASE_URL from env.
                base := env.Get("BASE_URL", "http://127.0.0.1:8080")
                canon := meta.Canonical
                if canon != "" && strings.HasPrefix(canon, "/") {
                    canon = base + canon
                }
                if canon != "" {
                    <link rel="canonical" href={ canon }/>
                    <meta property="og:url" content={ canon }/>
                }
            }
            <meta name="twitter:card" content="summary"/>
            <meta name="theme-color" content="#0b0b12"/>
            <link rel="icon" href="/static/favicon.svg" type="image/svg+xml"/>
            <link rel="stylesheet" href="/static/styles.css"/>
            <link rel="preconnect" href="https://cdn.jsdelivr.net"/>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.css"/>
            <script src="https://unpkg.com/htmx.org@2.0.3" integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq" crossorigin="anonymous"></script>
            <script>
            // Inject CSRF token into HTMX requests using header X-CSRF-Token
            (function(){
              function getCookie(name){
                const v = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
                return v ? v.pop() : '';
              }
              document.addEventListener('htmx:configRequest', function(evt){
                var token = getCookie('_gforge_csrf');
                if (token) {
                  evt.detail.headers['X-CSRF-Token'] = token;
                }
              });
            })();
            </script>
        </head>
        <body class="min-h-screen bg-base-100 text-base-content">
            { children... }
        </body>
    </html>
}
